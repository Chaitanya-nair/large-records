{-# LANGUAGE ConstraintKinds       #-}
{-# LANGUAGE CPP                   #-}
{-# LANGUAGE DataKinds             #-}
{-# LANGUAGE FlexibleContexts      #-}
{-# LANGUAGE FlexibleInstances     #-}
{-# LANGUAGE MultiParamTypeClasses #-}
{-# LANGUAGE ScopedTypeVariables   #-}
{-# LANGUAGE StandaloneDeriving    #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TemplateHaskell       #-}
{-# LANGUAGE TypeFamilies          #-}
{-# LANGUAGE UndecidableInstances  #-}

-- {-# OPTIONS_GHC -ddump-splices #-}

#if PROFILE_GEN_CODE
{-# OPTIONS_GHC -fplugin=GhcDump.Plugin #-}
#endif

module Test.Record.Size.After.HK010 where

import Data.Record.TH

import Test.Record.Size.Infra

largeRecord defaultLazyOptions (higherKindedRecordOfSize 10)

-- Complains about
--
-- > No instance for (Data.Functor.Classes.Show1 r)
-- >   arising from a use of ‘show’
--
-- which is what we want: @ghc@ has simplified all 10 constraints on each
-- individual field (generated by 'largeRecord') to a single constraint on @r@.
--
-- TODO: Perhaps we could check this automatically using -fdefer-type-errors.
--
-- checkInferredType :: HKR r -> String
-- checkInferredType (r :: HKR f) = show r
